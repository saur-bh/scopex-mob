# wallet - I want to check wallet feature
# I want to check wallet feature

# IMPORTANT: Use Maestro Studio to record your test steps!
# 1. Run: maestro studio
# 2. Record your test actions
# 3. Copy the generated commands to replace the placeholder steps below

appId: com.scopex.scopexmobile
name: "wallet"
tags: ["smoke", "clear-state"]

# Environment variables
env:
  TEST_START_TIME: "${Date.now()}"
  PLATFORM: "${maestro.platform}"
  MAX_RETRIES: "3"

# Flow hooks for setup and cleanup
onFlowStart:
  - evalScript: "output.testStartTime = Date.now();"
  - evalScript: "output.stepCount = 0;"

onFlowComplete:
  - evalScript: "const duration = Date.now() - output.testStartTime;"
  - evalScript: "output.stepCount++;"
  - takeScreenshot: "wallet-complete"

---
# Start screen recording
- startRecording:
    path: 'wallet'
    label: 'wallet Recording'

# Step 1: Launch the app with state clearing
- launchApp:
    appId: "com.scopex.scopexmobile"
    clearState: true
    clearKeychain: true

# Step 2: Wait for app to load
- extendedWaitUntil:
    visible: "Continue"
    timeout: 15000

# Step 3: Navigate through onboarding
# Screen 1: Initial onboarding
- assertVisible: "Continue"

# Navigate to next screen
- tapOn: "Continue"

# Screen 2: Trusted by thousands
- assertVisible: "Continue"

# Navigate to next screen
- tapOn: "Continue"

# Screen 3: Designed for love
- assertVisible: "Get Started"

# Complete onboarding
- tapOn: "Get Started"

# Step 4: Handle signup flow
# Verify navigation to signup screen
- assertVisible: "Sign.*"
- assertVisible: "Sign up to continue"

# Tap on Sign up
- tapOn: "Sign up to continue"

# Verify email input screen
- extendedWaitUntil:
    visible: "Email"
    timeout: 10000

# Enter email
- tapOn: "Email"
- inputText: "teshank.2137@gmail.com"

# Tap Next
- tapOn: "Continue"

# Handle OTP flow
- tapOn: "Login with code"

# Enter OTP
- tapOn:
    point: "11%,41%"
- inputText: "000000"

# Complete OTP verification
- tapOn: "Verify"
- tapOn: "Verify"


# Step 5: Verify successful signup
- extendedWaitUntil:
    visible: "Send Money"
    timeout: 15000

# Step 6: Your specific test steps here (REPLACE WITH RECORDED COMMANDS)
- evalScript: "console.log('Step 6: Performing test action...');"
# Step 2: Tap on wallet from footer menu option
- assertVisible: "Wallet"
- tapOn:
    text: "Wallet"
    index: 0
    enabled: true
- assertVisible: "WALLET BALANCE"
- assertVisible: "Top Up wallet"
- assertVisible: "Select amount"

# # Step 3: Tap on €1,000 predefined value
# - tapOn: "€1,000"
# - assertVisible: "1000"  # Verify the amount is selected and displayed

# Step 4: Tap on Add € 1,000 button
- tapOn: "Add € 500"

# Step 5: Observe top-up process tab
- assertVisible: "Send 500 EUR"
- assertVisible: "Send funds from your bank account"
- assertVisible: "Send Now"
- assertVisible: "Top-up process"
- assertVisible: "Add Money Request Initiated"
- assertVisible: "Send funds from your bank"
- assertVisible: "Funds verification"
- assertVisible: "Funds added to your wallet"

# Verify the process steps and their status
# - assertVisible: "20 August 2025, 07:46 PM"  # Timestamp for initiated step
# - assertVisible: "Please use your own bank for transfer"

# Step 6: Tap on Details button and observe the details screen
- tapOn: "Details"
- assertVisible: "Amount"
- assertVisible: "500 EUR"
- assertVisible: "Currency" 
- assertVisible: "EUR"
- assertVisible: "Transfer Mode"

- assertVisible: "Send Now"

# Optional: Navigate back to verify we can return to the process tab
- tapOn: "Top-up process"
- assertVisible: "Add Money Request Initiated"
- assertVisible: "Send funds from your bank"


- evalScript: "console.log('Test action completed');"


# Step 8: Take screenshot
- evalScript: "console.log('Step 8: Taking screenshot...');"
- takeScreenshot: "wallet-complete"

# Step 9: Final verification
- evalScript: "console.log('Step 9: Final verification...');"
- assertTrue: "maestro.appId === 'com.scopex.scopexmobile'"
- evalScript: "console.log('wallet test completed successfully!');"

# Stop recording
- evalScript: "console.log('Recording completed - wallet test finished');"
- stopRecording

# ============================================================================
# INSTRUCTIONS FOR RECORDING TEST STEPS:
# ============================================================================
# 1. Start Maestro Studio:
#    maestro studio
#
# 2. Record your test actions:
#    - Navigate through your app
#    - Perform the actions you want to test
#    - Maestro will generate the commands
#
# 3. Copy the generated commands and replace the placeholder steps above
#    - Look for the TODO comments
#    - Replace with your recorded commands
#
# 4. Test your flow:
#    ./run-tests.sh flows/feature/wallet.yaml
# ============================================================================
