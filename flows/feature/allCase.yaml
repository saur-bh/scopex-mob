# Recipient - this is to test user can add recipient using setting
# this is to test user can add recipient using setting

# IMPORTANT: Use Maestro Studio to record your test steps!
# 1. Run: maestro studio
# 2. Record your test actions
# 3. Copy the generated commands to replace the placeholder steps below

appId: com.scopex.scopexmobile
name: "Recipient"
tags: ["sanity", "clear-state", "recipient"]

# Environment variables
env:
  TEST_START_TIME: "${Date.now()}"
  PLATFORM: "${maestro.platform}"
  MAX_RETRIES: "3"

# Flow hooks for setup and cleanup
onFlowStart:
  - evalScript: "output.testStartTime = Date.now();"
  - evalScript: "output.stepCount = 0;"

onFlowComplete:
  - evalScript: "const duration = Date.now() - output.testStartTime;"
  - evalScript: "output.stepCount++;"
  - takeScreenshot: "allCase-complete"

---
# Start screen recording
- startRecording:
    path: 'allCase'
    label: 'Recipient Recording'

# Step 1: Launch the app with state clearing
- launchApp:
    appId: "com.scopex.scopexmobile"
    clearState: true
    clearKeychain: true

# Step 2: Wait for app to load
- extendedWaitUntil:
    visible: "Continue"
    timeout: 15000

# Step 3: Navigate through onboarding
# Screen 1: Initial onboarding
- assertVisible: "Continue"

# Navigate to next screen
- tapOn: "Continue"

# Screen 2: Trusted by thousands
- assertVisible: "Continue"

# Navigate to next screen
- tapOn: "Continue"

# Screen 3: Designed for love
- assertVisible: "Get Started"

# Complete onboarding
- tapOn: "Get Started"

# Step 4: Handle signup flow
# Verify navigation to signup screen
- assertVisible: "Sign.*"
- assertVisible: "Sign up to continue"

# Tap on Sign up
- tapOn: "Sign up to continue"

# Verify email input screen
- extendedWaitUntil:
    visible: "Email"
    timeout: 10000

# Enter email
- tapOn: "Email"
- inputText: "scopexverifieduser@yopmail.com"

# Tap Next
- repeat:
    while:
      visible: "Continue"
    commands:
      - tapOn: "Continue"

# Handle OTP flow
- tapOn: "Login with code"

# Enter OTP
- tapOn:
    point: "11%,41%"
- inputText: "000000"

# Complete OTP verification
- repeat:
    while:
      visible: "Verify"
    commands:
      - tapOn: "Verify"


# Step 5: Verify successful signup
- extendedWaitUntil:
    visible: "Send Money"
    timeout: 15000



# Compare tab navigation
- tapOn:
    text: "Compare.*"
    index: 0
    enabled: true

# Settings tab navigation
- tapOn:
    text: "Settings"
    index: 0
    enabled: true

# Wait for Settings screen to load
- extendedWaitUntil:
    visible: "Settings"
    timeout: 10000

# Verify Settings screen elements exist (Traditional assertions)
- assertVisible: "Notifications"
- assertVisible: "App lock"
- assertVisible: "Devices"
- assertVisible: "Wallet recovery"
- assertVisible: "Delete account"

# AI-powered assertion for comprehensive Settings screen verification
- assertWithAI:
    assertion: "The Settings screen contains exactly one instance of each of the following elements: 'Notifications', 'App lock', 'Devices', 'Wallet recovery', and 'Delete account'. All five elements should be visible and there should be no duplicates of any of these elements."

# Take screenshot for verification
- takeScreenshot: "settings-screen-verified"

# Step 7: Verify main navigation elements with scroll support
# Use scrollUntilVisible for elements that might be off-screen

# Test Transfers section
- tapOn:
    text: "Transfers"
    index: 0
    enabled: true
# Test Wallet section
- assertVisible: "Wallet"
- tapOn:
    text: "Wallet"
    index: 0
    enabled: true
# Home tab navigation - use more specific selector
- tapOn:
    text: "Home"
    index: 0
    enabled: true

# Verify we're on home screen
- assertVisible: "25 paise better than"

# Step 6: Load and use the getRate script
- runScript: ../../scripts/getRate.js

# Step 7: Verify the rate was fetched and log it
- evalScript: "console.log('Current exchange rate:', output.currentRate);"
- evalScript: "if (!output.currentRate) { console.error('Failed to fetch rate from API'); }"

# Verify rate is visible on screen using the dynamic rate from API
- assertVisible: "1 EUR = ${output.currentRate} INR"

# ... existing code continues ...


#Step 1: Open hamburger menu
# Step 1: Open hamburger menu
- tapOn:
    id: header-button
    index: 0
- assertVisible: "Recipients"

# Step 2: Navigate to Recipients
- tapOn: "Recipients"
- assertVisible: "Add.*"

# Step 3: Tap on Add New Recipient
- tapOn: "Add.*"
- assertVisible: "Add a new recipient"
- assertVisible: "Just a few details to proceed"

# Step 4: Select an avatar (first one)
- tapOn:
    id: "avatar" # First avatar option

# Step 5: Fill in recipient details
- tapOn: "Nickname"
- inputText: "Automation Test"

- tapOn: "IFSC Code" 
- inputText: "YESB0000611"

- tapOn: "Account Number"
- inputText: "061190400001392"

# Step 6: Verify all fields are filled
- assertVisible: "Automation Test"
- assertVisible: "YESB0000611" 
- assertVisible: "061190400001392"

# Step 7: Complete recipient addition
- tapOn: "Continue"

- assertVisible: "Account number already exists"
- tapOn: "✕"
- tapOn: ""
- tapOn: "Settings"
- assertVisible: "Settings"
- tapOn: "Settings"

# Step 8: Take screenshot
- evalScript: "console.log('Step 8: Taking screenshot...');"
- takeScreenshot: "Recipient-complete"

# Step 9: Final verification
- evalScript: "console.log('Step 9: Final verification...');"
- assertTrue: "maestro.appId === 'com.scopex.scopexmobile'"
- evalScript: "console.log('Recipient test completed successfully!');"



# Stop recording
- evalScript: "console.log('Recording completed - Recipient test finished');"
- stopRecording

# ============================================================================
# INSTRUCTIONS FOR RECORDING TEST STEPS:
# ============================================================================
# 1. Start Maestro Studio:
#    maestro studio
#
# 2. Record your test actions:
#    - Navigate through your app
#    - Perform the actions you want to test
#    - Maestro will generate the commands
#
# 3. Copy the generated commands and replace the placeholder steps above
#    - Look for the TODO comments
#    - Replace with your recorded commands
#
# 4. Test your flow:
#    ./run-tests.sh flows/feature/Recipient.yaml
# ============================================================================
